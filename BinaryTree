/**
 * Created by Gebruiker on 20/10/2016.
 */
public class Maze {

}

class Node {

    int key;
    String name;

    Node leftChild;
    Node rightChild;

    Node(int key, String name) {
        this.key = key;
        this.name = name;
    }

    public String toString() {

        return name + " has a key " + key;
    }
}

class BinaryTree {

    Node root;

    public void addNote(int key, String name) {
        Node newNode = new Node(key, name);

        if (root == null) {
            root = newNode;
        } else {
            Node focusNode = root;
            Node parent;
            while (true) {

                parent = focusNode;

                if (key < focusNode.key) {
                    focusNode = focusNode.leftChild;
                    if (focusNode == null) {
                        parent.leftChild = newNode;
                        return;
                    }
                } else {
                    focusNode = focusNode.rightChild;
                    if (focusNode == null) {
                        parent.rightChild = newNode;
                        return;
                    }

                }
            }
        }
    }

    public void inOrderTraverse(Node focusNode) {
        if (focusNode != null) {
            inOrderTraverse(focusNode.leftChild);
            System.out.println(focusNode);
            inOrderTraverse(focusNode.rightChild);
        }
    }

    public void preorderTraverse(Node focusNode) {
        if (focusNode != null) {
            System.out.println(focusNode);
            preorderTraverse(focusNode.leftChild);
            preorderTraverse(focusNode.rightChild);
        }
    }

    public Node findNode(int key) {
        Node focusNode = root;

        while (focusNode.key != key) {
            if (key < focusNode.key) {
                focusNode = focusNode.leftChild;
            } else {
                focusNode = focusNode.rightChild;
            }
            if (focusNode == null) {
                return null;
            }
        }
        return focusNode;
    }

    public static void main(String[] args) {
        BinaryTree theTree = new BinaryTree();

        theTree.addNote(40, "Marina");
        theTree.addNote(23, "Alex");
        theTree.addNote(44, "Antonella");
        theTree.addNote(12, "Marco");
        theTree.addNote(50, "Francesco");

        theTree.preorderTraverse(theTree.root);
        System.out.println(theTree.findNode(12));
        

    }

}
